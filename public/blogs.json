{"status":"ok","feed":{"url":"https://medium.com/feed/@nickanism","title":"Stories by Nicholas An on Medium","link":"https://medium.com/@nickanism?source=rss-6fe9d0704dae------2","author":"","description":"Stories by Nicholas An on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/0*fR3cXOnJ_Sq4Ndhp"},"items":[{"title":"Crafting a Thorough Guide for New Developers (macOS on VirtualBox)","pubDate":"2021-07-05 06:43:33","link":"https://nickanism.medium.com/crafting-a-thorough-guide-for-new-developers-macos-on-virtualbox-675ae02c869?source=rss-6fe9d0704dae------2","guid":"https://medium.com/p/675ae02c869","author":"Nicholas An","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*1IJqCnGIt_MWzooYE7TiuA.png","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1IJqCnGIt_MWzooYE7TiuA.png\"></figure><p>Here comes a long-tough part of writing the guide for our next developers. Installing and running macOS on a virtual machine is not an easy task especially if you are running it on a laptop with less RAM (I haven\u2019t done this task on a desktop with 32GB or more RAM so I cannot say it would be easy on such desktop environment, to be honest). Thankfully my laptop has 16 GB of RAM so it barely runs. Let\u2019s get\u00a0started.</p>\n<h3>Installation of macOS on a\u00a0VM</h3>\n<p>I used VirtualBox in order to commence this task. The issue with installation was that I could not find a valid drive to install on at the\u00a0outset.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1020/1*LbHeoDRAQRBIQPVkXuFltw.png\"><figcaption>There is nothing to\u00a0select</figcaption></figure><p>This can be solved by going to <strong>Disk Utility</strong> and erasing a virtual hard disk with <strong>Mac OS Extended (Journaled)</strong> as the\u00a0format.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1SAhwHbovEou9scbEm_iQQ.png\"><figcaption>You need to erase the virtual hard disk with \u201cMac OS Extended (Journaled)\u201d</figcaption></figure><p>It\u2019s going to take forever to install the macOS. I used Big Sur and it took about a couple of hours. Once it is installed, you will realize it also takes forever for the basic GUI to turn up and your mouse pointer will take 5 or more seconds to respond. It\u2019s time for you to change the VM settings so that the virtual Mac machine takes at least 8 GB of RAM and GUI gets more resources.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*O1lUxOf366Yh0um5-3fn8Q.png\"><figcaption>I gave about 9 GB of RAM to this virtual Mac\u00a0machine</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1sTqmDpZ8O_9DARi5ajcTA.png\"><figcaption>Gave some extra Video Memory and checked \u201cEnable 3D Acceleration\u201d</figcaption></figure><p>This will help a lot but you should still expect some lagging. Nevertheless, this was enough for me to continue working on it since after all, I am not doing anything too fancy\u00a0here.</p>\n<h3>Installation of\u00a0Homebrew</h3>\n<p>Some people would take Homebrew as given since it is the very first thing that you install and forget about it. Well, here are some reminders of the fresh feeling of setting up your dev environment.</p>\n<pre>$ export HOMEBREW_CORE_GIT_REMOTE=\"https://github.com/Homebrew/homebrew-core.git\"</pre>\n<pre>$ export HOMEBREW_BREW_GIT_REMOTE=\"https://github.com/Homebrew/brew.git\"</pre>\n<pre>$ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"</pre>\n<p>Then just check if it is installed properly by brew --version\u00a0.</p>\n<h3>Installing basic\u00a0tools</h3>\n<p>First, we gotta install Vim or Emacs. Any text editing tool will do. Unlike Linux, you do not use the sudo command in\u00a0brew.</p>\n<p>$ brew install\u00a0vim</p>\n<p>or</p>\n<p>$ brew install\u00a0emacs</p>\n<p>And you should install\u00a0Git.</p>\n<p>$ brew install\u00a0git</p>\n<p>Then you should install Pyenv and\u00a0Python</p>\n<pre># Update Homebrew and install Pyenv<br>$ brew update<br>$ brew install pyenv</pre>\n<pre># This is optional. Don't worry if it fails.<br>$ cd ~/.pyenv &amp;&amp; src/configure &amp;&amp; make -C src</pre>\n<pre># Install Python and enable it globally. (you can use other versions of Python)<br>$ pyenv install 3.7.9<br>$ pyenv global 3.7.9</pre>\n<p>Now it\u2019s time to create a virtual environment and activate\u00a0it.</p>\n<pre>$ python -m venv myenv<br>$ source myenv/bin/activate</pre>\n<h3>Gaining Authentication for your GitHub\u00a0repo</h3>\n<p>By default, your new machine won\u2019t have access to the GitHub repository, even if you are logged in to GitHub on your browser. For your new Terminal setup, you will have to register with a new SSH\u00a0key.</p>\n<ul>\n<li>enter ssh-keygen -t ed25519 -C \"youremail@example.com\"</li>\n<li>eval \"$(ssh-agent -s)\"</li>\n</ul>\n<p>Then you need to modify your ~/.ssh/config file if you are using Sierra 10.12.2 or\u00a0later.</p>\n<ul>\n<li>touch ~/.ssh/config</li>\n<li>open your ~/.ssh/config file and insert the following:</li>\n</ul>\n<pre>Host *<br>    AddKeysToAgent yes<br>    UseKeychain yes<br>    IdentityFile ~/.ssh/id_ed25519</pre>\n<p>After saving and closing,\u00a0enter:</p>\n<ul>\n<li>ssh-add -K ~/.ssh/id_ed25519</li>\n<li>copy the key to the clipboard by entering pbcopy &lt; ~/.ssh/id_ed25519.pub</li>\n<li>go to the \u201cSSH and GPG keys\u201d section of \u2018Profile\u2019 -&gt; \u2018Settings\u2019 on Github and add the new key by pasting the copied\u00a0key.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*S1Wg63aIG1QQ5M4rsDcDsA.png\"><figcaption>the list of SSH\u00a0keys</figcaption></figure><p>Then you are all set! You are ready to clone the GitHub repository and install all the necessary packages which I explained in my previous\u00a0article.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=675ae02c869\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1IJqCnGIt_MWzooYE7TiuA.png\"></figure><p>Here comes a long-tough part of writing the guide for our next developers. Installing and running macOS on a virtual machine is not an easy task especially if you are running it on a laptop with less RAM (I haven\u2019t done this task on a desktop with 32GB or more RAM so I cannot say it would be easy on such desktop environment, to be honest). Thankfully my laptop has 16 GB of RAM so it barely runs. Let\u2019s get\u00a0started.</p>\n<h3>Installation of macOS on a\u00a0VM</h3>\n<p>I used VirtualBox in order to commence this task. The issue with installation was that I could not find a valid drive to install on at the\u00a0outset.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1020/1*LbHeoDRAQRBIQPVkXuFltw.png\"><figcaption>There is nothing to\u00a0select</figcaption></figure><p>This can be solved by going to <strong>Disk Utility</strong> and erasing a virtual hard disk with <strong>Mac OS Extended (Journaled)</strong> as the\u00a0format.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1SAhwHbovEou9scbEm_iQQ.png\"><figcaption>You need to erase the virtual hard disk with \u201cMac OS Extended (Journaled)\u201d</figcaption></figure><p>It\u2019s going to take forever to install the macOS. I used Big Sur and it took about a couple of hours. Once it is installed, you will realize it also takes forever for the basic GUI to turn up and your mouse pointer will take 5 or more seconds to respond. It\u2019s time for you to change the VM settings so that the virtual Mac machine takes at least 8 GB of RAM and GUI gets more resources.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*O1lUxOf366Yh0um5-3fn8Q.png\"><figcaption>I gave about 9 GB of RAM to this virtual Mac\u00a0machine</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1sTqmDpZ8O_9DARi5ajcTA.png\"><figcaption>Gave some extra Video Memory and checked \u201cEnable 3D Acceleration\u201d</figcaption></figure><p>This will help a lot but you should still expect some lagging. Nevertheless, this was enough for me to continue working on it since after all, I am not doing anything too fancy\u00a0here.</p>\n<h3>Installation of\u00a0Homebrew</h3>\n<p>Some people would take Homebrew as given since it is the very first thing that you install and forget about it. Well, here are some reminders of the fresh feeling of setting up your dev environment.</p>\n<pre>$ export HOMEBREW_CORE_GIT_REMOTE=\"https://github.com/Homebrew/homebrew-core.git\"</pre>\n<pre>$ export HOMEBREW_BREW_GIT_REMOTE=\"https://github.com/Homebrew/brew.git\"</pre>\n<pre>$ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"</pre>\n<p>Then just check if it is installed properly by brew --version\u00a0.</p>\n<h3>Installing basic\u00a0tools</h3>\n<p>First, we gotta install Vim or Emacs. Any text editing tool will do. Unlike Linux, you do not use the sudo command in\u00a0brew.</p>\n<p>$ brew install\u00a0vim</p>\n<p>or</p>\n<p>$ brew install\u00a0emacs</p>\n<p>And you should install\u00a0Git.</p>\n<p>$ brew install\u00a0git</p>\n<p>Then you should install Pyenv and\u00a0Python</p>\n<pre># Update Homebrew and install Pyenv<br>$ brew update<br>$ brew install pyenv</pre>\n<pre># This is optional. Don't worry if it fails.<br>$ cd ~/.pyenv &amp;&amp; src/configure &amp;&amp; make -C src</pre>\n<pre># Install Python and enable it globally. (you can use other versions of Python)<br>$ pyenv install 3.7.9<br>$ pyenv global 3.7.9</pre>\n<p>Now it\u2019s time to create a virtual environment and activate\u00a0it.</p>\n<pre>$ python -m venv myenv<br>$ source myenv/bin/activate</pre>\n<h3>Gaining Authentication for your GitHub\u00a0repo</h3>\n<p>By default, your new machine won\u2019t have access to the GitHub repository, even if you are logged in to GitHub on your browser. For your new Terminal setup, you will have to register with a new SSH\u00a0key.</p>\n<ul>\n<li>enter ssh-keygen -t ed25519 -C \"youremail@example.com\"</li>\n<li>eval \"$(ssh-agent -s)\"</li>\n</ul>\n<p>Then you need to modify your ~/.ssh/config file if you are using Sierra 10.12.2 or\u00a0later.</p>\n<ul>\n<li>touch ~/.ssh/config</li>\n<li>open your ~/.ssh/config file and insert the following:</li>\n</ul>\n<pre>Host *<br>    AddKeysToAgent yes<br>    UseKeychain yes<br>    IdentityFile ~/.ssh/id_ed25519</pre>\n<p>After saving and closing,\u00a0enter:</p>\n<ul>\n<li>ssh-add -K ~/.ssh/id_ed25519</li>\n<li>copy the key to the clipboard by entering pbcopy &lt; ~/.ssh/id_ed25519.pub</li>\n<li>go to the \u201cSSH and GPG keys\u201d section of \u2018Profile\u2019 -&gt; \u2018Settings\u2019 on Github and add the new key by pasting the copied\u00a0key.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*S1Wg63aIG1QQ5M4rsDcDsA.png\"><figcaption>the list of SSH\u00a0keys</figcaption></figure><p>Then you are all set! You are ready to clone the GitHub repository and install all the necessary packages which I explained in my previous\u00a0article.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=675ae02c869\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["development","virtualbox-tips","github","development-environment","mac"]},{"title":"Crafting a Thorough Guide for New Developers (Ubuntu on VirtualBox)","pubDate":"2021-06-30 07:59:43","link":"https://nickanism.medium.com/crafting-a-thorough-guide-for-new-developers-ubuntu-on-virtualbox-e76a45b7f01?source=rss-6fe9d0704dae------2","guid":"https://medium.com/p/e76a45b7f01","author":"Nicholas An","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*myV8o7IlMm5ozpvnRINqzg.png","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*myV8o7IlMm5ozpvnRINqzg.png\"></figure><p>Recently, I have been having so much fun editing our existing README file on our Github. The README file has long been left unattended and only used for a couple of random resources for developers like \u201cDon\u2019t overuse count() and exists().\u201d and \u201cUse foreign key values directly!\u201d. I am 80% sure that nobody really facilitates the former README since such resources were already shared on Slack and we didn\u2019t use them often, maybe except Google\u2019s coding style guidelines (<a href=\"https://google.github.io/styleguide/pyguide.html\">link</a>).</p>\n<p>Well, it was about time to fix\u00a0this!</p>\n<h3>Useful Markdown Techniques</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*74CeY4-uSpNUSapNiPLeLg.png\"><figcaption>part of our README.md</figcaption></figure><p>There are many posts out there that boast a wide array of Markdown syntaxes. However, too much info isn\u2019t that efficient when it comes to IT and I have been meaning to make my own list of Markdown syntaxes and techniques that might be useful in the future (and for others\u00a0also).</p>\n<p>The thing is, I have used a mixture of HTML and Markdown syntaxes, for some HTML syntaxes can come very handy in certain situations. However, let me introduce some <strong>very</strong> basic Markdown syntaxes.</p>\n<h4>Basic Markdown\u00a0Syntaxes</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/826/1*RRGYjA7x62xmKi8styFlXA.png\"><figcaption>Headings</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/825/1*F26tq32_0oPo9H2VAoLrcg.png\"><figcaption>Bold</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/836/1*bF6LWXPMDbUVhQe19cmkeA.png\"><figcaption>Blockquotes</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/835/1*b80fmU1PzLDN6SSx27PwNw.png\"><figcaption>Ordered Lists</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/835/1*TcfxVVr_X3kJojRXt9Jd4Q.png\"><figcaption>Unordered Lists</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/840/1*JQWbR9qYvBQATJuTGK_rtQ.png\"><figcaption>Code</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/838/1*BCh12crJPBVVKB9GpnuEyg.png\"><figcaption>Links</figcaption></figure><p>That\u2019s pretty much it! Now it\u2019s time to demonstrate some useful techniques involving the syntaxes I just introduced.</p>\n<p>Since our README file is growing massic, in my opinion, the most important thing is to add some sort of navigation. Most of the books out there have this thing called <strong>Table of Content</strong>. There is a way for you to make the same thing for your\u00a0README.</p>\n<h4>How to Make Table of\u00a0Content</h4>\n<p>Let\u2019s say you have three chapters in your README (Chapter 1, Chapter 2, Chapter\u00a03).</p>\n<pre># Chapter 1<br>## sub-chapter A <br>some content<br>## sub-chapter B<br>some content</pre>\n<pre># Chapter 2<br>## sub-chapter A<br>some content<br>## sub-chapter B<br>some content</pre>\n<pre># Chapter 3<br>## sub-chapter A<br>some content<br>## sub-chapter B<br>some content</pre>\n<p>The Table of Content for this example would look like\u00a0this:</p>\n<pre># Table of Content<br>1. Chapter 1<br>2. Chapter 2<br>3. Chapter 3</pre>\n<p>If any of those chapters have like 100 or 1000 lines each, such a table would barely help the developers who only need certain parts of the whole README. There is a way to make those table elements lead them directly to the corresponding chapter. Utilize\u00a0[]().</p>\n<pre># Table of Content<br>1. [Chapter 1](#chapter_1)<br>2. [Chapter 2](#chapter_2)<br>3. [Chapter 3](#chapter_3)</pre>\n<pre># Chapter 1 &lt;a name=\"chapter_1\"&gt;&lt;/a&gt;<br>## sub-chapter A <br>some content<br>## sub-chapter B<br>some content</pre>\n<pre># Chapter 2 &lt;a name=\"chapter_2\"&gt;&lt;/a&gt;<br>## sub-chapter A<br>some content<br>## sub-chapter B<br>some content</pre>\n<pre># Chapter 3 &lt;a name=\"chapter_3\"&gt;&lt;/a&gt;<br>## sub-chapter A<br>some content<br>## sub-chapter B<br>some content</pre>\n<p>Pay attention to the partial HTML syntaxes, &lt;a&gt; tags. Inside each tag, I put the alias of each chapter headings, which I used as a link in the Table of Content with the \u2018#\u2019 prefix. This will create direct links where a user doesn\u2019t have to do anything but click the chapter element to immediately land on the corresponding part.</p>\n<h4>How to Put External\u00a0Links</h4>\n<p>Our new README is very thorough and has almost every step in order to install and set up local environments. However, nothing can be perfect that some others with different desktop environments shall be stuck with some esoteric technical issues unique to their machine. Therefore, I had to put a lot of links to those source websites for documentation where I utilized in order to solve\u00a0issues.</p>\n<p>One simple syntax is\u00a0this</p>\n<pre>[Here is the link!](http://examplemodule.com/doc/setup.html/)</pre>\n<p>This will show just \u201cHere is the link!\u201d with a hyperlink that lands you to the corresponding link\u00a0address.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/543/1*26Bgslt_C3GL7DZalte6kA.png\"><figcaption>syntax in\u00a0use</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/359/1*bZzngHokaBrcw8jFheJ00Q.png\"><figcaption>result</figcaption></figure><p>In my very honest opinion, just throwing a bunch of useful original documentation on the README itself could be very useful. My README is too granularly detailed that I am afraid some new developers might not improve their way of solving technical issues themselves. However, I trust that our new Jr. SWEs have enough problem-solving skills already and my README will only significantly reduce the time and headaches from the initial\u00a0setup.</p>\n<h3>Structure of the New\u00a0README</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/473/1*ghaMYv8FPS9FPT6W0tUB4Q.png\"><figcaption>the first part of the\u00a0README</figcaption></figure><p>Unfortunately, I cannot share small details of the README because there is much sensitive information that can be used maliciously. So I will only introduce the highest level of abstractions.</p>\n<h4>General Information</h4>\n<p>This is where I introduced the whole picture of our backend project. There can be some confusing parts\u200a\u2014\u200aa lot of people prefer to call a whole thing an \u201capplication\u201d or \u201capp\u201d while I wanted to distinguish between a whole \u201cproject\u201d from several \u201capplications\u201d that amount to be this \u201cproject\u201d.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tNRaWWuznXID7zdW8Al1cg.png\"><figcaption>an answer from StackOverflow</figcaption></figure><p>In this chapter, I explained what each app does\u200a\u2014\u200ae.g, \u201c<em>contacts</em> app is responsible for managing accounts such as user accounts, clients, and suppliers\u201d. As of June 2021, there are six apps in this project so it wasn\u2019t hard to finish this\u00a0chapter.</p>\n<h4>Technologies</h4>\n<p>This is where I listed languages and libraries and etc. It has two big parts: application level and infrastructure level. The former has a long list of languages that constitute this project such as Python, JavaScript, and SQL. It also has many libraries listed in requirements.txt. I didn\u2019t go through every single package in requirements.txt (i.e, Django, DRF, boto3) because some of them are deprecated\u200a\u2014\u200awhich I might have to come back to and inform that they are indeed deprecated.</p>\n<p>The infrastructure level lines up a bunch of Amazon Web Service platforms and tools. It is useful for the Jr. SWEs to take a look at the how and why of AWS platforms. Since our company is too small to have DevOps (yet!) our backend SWEs need to learn how to use\u00a0them.</p>\n<h4>Project Setup</h4>\n<p>This is the most fun part! I had so much fun (I repeat it!). In my case, I used VirtualBox to install a whole new Linux machine because trying to set it up on my existing machine would be pointless since all the necessary packages are already installed.</p>\n<p><a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox download link</a><br><a href=\"https://ubuntu.com/download/desktop\">Ubuntu download\u00a0link</a></p>\n<p>The first problem I faced was the installation of\u00a0Ubuntu.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xMZA6mnSbtnu6ieoRi9aKg.png\"><figcaption>this is when the issue turns\u00a0up</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/684/1*7Pv8lCobW-SQ19eEjDol3g.png\"><figcaption>Click on Normal\u00a0Start</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*S1y7Pj7TkmanvKqP0GWAcg.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/534/1*k0q48Ac4wRlCapxx8uJrFg.png\"><figcaption>when you click \u201cAdd\u201d, it shows some\u00a0error</figcaption></figure><p>When you press <em>Add</em>, VirtualBox will suddenly stop working and show you some fatal error. The solution is to manually locate the iso file\u00a0with:</p>\n<ol>\n<li>right-click on the new machine (located on the left side of the VirtualBox UI)</li>\n<li>Settings</li>\n<li>choose the Storage tab on the upper\u00a0part</li>\n<li>\u2193 refer to the image below\u00a0<strong>\u2193</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9Q4romUTukBx2_c89U62Ww.png\"></figure><p>After this, you will be able to rev up the new Ubuntu machine with no problem. The installation process will take some time (at least 10 minutes).</p>\n<h4>After the VM\u00a0Setup</h4>\n<p>The first thing I did was to install <strong>very basic</strong> tools for software developers: a text editing tool and\u00a0Git.</p>\n<ul>\n<li>open Terminal</li>\n<li>sudo apt-get install --upgrade</li>\n<li>sudo apt-get install vim or sudo apt-get install emacs (whichever floats your boat\u2026 can also be nano\u2026 but take a look at the picture below and choose accordingly)</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*QzUi_Y9Jlg_FcrWuetfLnQ.png\"></figure><ul><li>sudo apt install\u00a0git</li></ul>\n<p>Then it was time to install pyenv and\u00a0Python</p>\n<ul>\n<li>\n<a href=\"https://github.com/pyenv/pyenv\">pyenv doc link</a> (I used this doc to install\u00a0pyenv)</li>\n<li>once pyenv is installed, I restarted the login\u00a0session.</li>\n<li>pyenv install\u00a03.7.9</li>\n<li>pyenv versions shows\u00a03.7.9</li>\n<li>pyenv global 3.7.9 to set the global Python\u00a0version</li>\n</ul>\n<p>And lastly, I created the Python environment</p>\n<ul>\n<li>python3 -m venv\u00a0myenv</li>\n<li>source myenv/bin/activate</li>\n</ul>\n<p>Then came all the nitty-gritty of installing Tradir backend project after gaining authentication for the repository, then setting up the pip packages &amp; PSQL server, and etc\u2026 sensitive stuff cannot be posted here. However, I will show you one thing that bothered me every time I tried to set up a local Python environment in the next part: epilogue.</p>\n<h3>Epilogue</h3>\n<p>If your codebase has a lot of packages going on, there is a chance that your Python project\u00a0has</p>\n<p>A. mysqlclient<br>B. psycopg2<br>C. tangled dependencies</p>\n<p>I am going to show you how to solve those problems.</p>\n<p>Navigate into the directory where you have your <em>requirements.txt</em>. If you try to install every package, it will most likely cause some error with \u201cexit code 1\u201d. To fix this you need\u00a0to:</p>\n<ul>\n<li>sudo apt-get install python3-dev defautl-libmysqlclient-dev build-essential</li>\n<li>pip install mysqlclient</li>\n<li>sudo apt-get install libpq-dev python-dev</li>\n</ul>\n<p>And finally:</p>\n<ul><li>pip install --no-deps -r requirements.txt</li></ul>\n<p>because --no-deps solves the tangled dependency issues.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e76a45b7f01\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*myV8o7IlMm5ozpvnRINqzg.png\"></figure><p>Recently, I have been having so much fun editing our existing README file on our Github. The README file has long been left unattended and only used for a couple of random resources for developers like \u201cDon\u2019t overuse count() and exists().\u201d and \u201cUse foreign key values directly!\u201d. I am 80% sure that nobody really facilitates the former README since such resources were already shared on Slack and we didn\u2019t use them often, maybe except Google\u2019s coding style guidelines (<a href=\"https://google.github.io/styleguide/pyguide.html\">link</a>).</p>\n<p>Well, it was about time to fix\u00a0this!</p>\n<h3>Useful Markdown Techniques</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*74CeY4-uSpNUSapNiPLeLg.png\"><figcaption>part of our README.md</figcaption></figure><p>There are many posts out there that boast a wide array of Markdown syntaxes. However, too much info isn\u2019t that efficient when it comes to IT and I have been meaning to make my own list of Markdown syntaxes and techniques that might be useful in the future (and for others\u00a0also).</p>\n<p>The thing is, I have used a mixture of HTML and Markdown syntaxes, for some HTML syntaxes can come very handy in certain situations. However, let me introduce some <strong>very</strong> basic Markdown syntaxes.</p>\n<h4>Basic Markdown\u00a0Syntaxes</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/826/1*RRGYjA7x62xmKi8styFlXA.png\"><figcaption>Headings</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/825/1*F26tq32_0oPo9H2VAoLrcg.png\"><figcaption>Bold</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/836/1*bF6LWXPMDbUVhQe19cmkeA.png\"><figcaption>Blockquotes</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/835/1*b80fmU1PzLDN6SSx27PwNw.png\"><figcaption>Ordered Lists</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/835/1*TcfxVVr_X3kJojRXt9Jd4Q.png\"><figcaption>Unordered Lists</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/840/1*JQWbR9qYvBQATJuTGK_rtQ.png\"><figcaption>Code</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/838/1*BCh12crJPBVVKB9GpnuEyg.png\"><figcaption>Links</figcaption></figure><p>That\u2019s pretty much it! Now it\u2019s time to demonstrate some useful techniques involving the syntaxes I just introduced.</p>\n<p>Since our README file is growing massic, in my opinion, the most important thing is to add some sort of navigation. Most of the books out there have this thing called <strong>Table of Content</strong>. There is a way for you to make the same thing for your\u00a0README.</p>\n<h4>How to Make Table of\u00a0Content</h4>\n<p>Let\u2019s say you have three chapters in your README (Chapter 1, Chapter 2, Chapter\u00a03).</p>\n<pre># Chapter 1<br>## sub-chapter A <br>some content<br>## sub-chapter B<br>some content</pre>\n<pre># Chapter 2<br>## sub-chapter A<br>some content<br>## sub-chapter B<br>some content</pre>\n<pre># Chapter 3<br>## sub-chapter A<br>some content<br>## sub-chapter B<br>some content</pre>\n<p>The Table of Content for this example would look like\u00a0this:</p>\n<pre># Table of Content<br>1. Chapter 1<br>2. Chapter 2<br>3. Chapter 3</pre>\n<p>If any of those chapters have like 100 or 1000 lines each, such a table would barely help the developers who only need certain parts of the whole README. There is a way to make those table elements lead them directly to the corresponding chapter. Utilize\u00a0[]().</p>\n<pre># Table of Content<br>1. [Chapter 1](#chapter_1)<br>2. [Chapter 2](#chapter_2)<br>3. [Chapter 3](#chapter_3)</pre>\n<pre># Chapter 1 &lt;a name=\"chapter_1\"&gt;&lt;/a&gt;<br>## sub-chapter A <br>some content<br>## sub-chapter B<br>some content</pre>\n<pre># Chapter 2 &lt;a name=\"chapter_2\"&gt;&lt;/a&gt;<br>## sub-chapter A<br>some content<br>## sub-chapter B<br>some content</pre>\n<pre># Chapter 3 &lt;a name=\"chapter_3\"&gt;&lt;/a&gt;<br>## sub-chapter A<br>some content<br>## sub-chapter B<br>some content</pre>\n<p>Pay attention to the partial HTML syntaxes, &lt;a&gt; tags. Inside each tag, I put the alias of each chapter headings, which I used as a link in the Table of Content with the \u2018#\u2019 prefix. This will create direct links where a user doesn\u2019t have to do anything but click the chapter element to immediately land on the corresponding part.</p>\n<h4>How to Put External\u00a0Links</h4>\n<p>Our new README is very thorough and has almost every step in order to install and set up local environments. However, nothing can be perfect that some others with different desktop environments shall be stuck with some esoteric technical issues unique to their machine. Therefore, I had to put a lot of links to those source websites for documentation where I utilized in order to solve\u00a0issues.</p>\n<p>One simple syntax is\u00a0this</p>\n<pre>[Here is the link!](http://examplemodule.com/doc/setup.html/)</pre>\n<p>This will show just \u201cHere is the link!\u201d with a hyperlink that lands you to the corresponding link\u00a0address.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/543/1*26Bgslt_C3GL7DZalte6kA.png\"><figcaption>syntax in\u00a0use</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/359/1*bZzngHokaBrcw8jFheJ00Q.png\"><figcaption>result</figcaption></figure><p>In my very honest opinion, just throwing a bunch of useful original documentation on the README itself could be very useful. My README is too granularly detailed that I am afraid some new developers might not improve their way of solving technical issues themselves. However, I trust that our new Jr. SWEs have enough problem-solving skills already and my README will only significantly reduce the time and headaches from the initial\u00a0setup.</p>\n<h3>Structure of the New\u00a0README</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/473/1*ghaMYv8FPS9FPT6W0tUB4Q.png\"><figcaption>the first part of the\u00a0README</figcaption></figure><p>Unfortunately, I cannot share small details of the README because there is much sensitive information that can be used maliciously. So I will only introduce the highest level of abstractions.</p>\n<h4>General Information</h4>\n<p>This is where I introduced the whole picture of our backend project. There can be some confusing parts\u200a\u2014\u200aa lot of people prefer to call a whole thing an \u201capplication\u201d or \u201capp\u201d while I wanted to distinguish between a whole \u201cproject\u201d from several \u201capplications\u201d that amount to be this \u201cproject\u201d.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tNRaWWuznXID7zdW8Al1cg.png\"><figcaption>an answer from StackOverflow</figcaption></figure><p>In this chapter, I explained what each app does\u200a\u2014\u200ae.g, \u201c<em>contacts</em> app is responsible for managing accounts such as user accounts, clients, and suppliers\u201d. As of June 2021, there are six apps in this project so it wasn\u2019t hard to finish this\u00a0chapter.</p>\n<h4>Technologies</h4>\n<p>This is where I listed languages and libraries and etc. It has two big parts: application level and infrastructure level. The former has a long list of languages that constitute this project such as Python, JavaScript, and SQL. It also has many libraries listed in requirements.txt. I didn\u2019t go through every single package in requirements.txt (i.e, Django, DRF, boto3) because some of them are deprecated\u200a\u2014\u200awhich I might have to come back to and inform that they are indeed deprecated.</p>\n<p>The infrastructure level lines up a bunch of Amazon Web Service platforms and tools. It is useful for the Jr. SWEs to take a look at the how and why of AWS platforms. Since our company is too small to have DevOps (yet!) our backend SWEs need to learn how to use\u00a0them.</p>\n<h4>Project Setup</h4>\n<p>This is the most fun part! I had so much fun (I repeat it!). In my case, I used VirtualBox to install a whole new Linux machine because trying to set it up on my existing machine would be pointless since all the necessary packages are already installed.</p>\n<p><a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox download link</a><br><a href=\"https://ubuntu.com/download/desktop\">Ubuntu download\u00a0link</a></p>\n<p>The first problem I faced was the installation of\u00a0Ubuntu.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xMZA6mnSbtnu6ieoRi9aKg.png\"><figcaption>this is when the issue turns\u00a0up</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/684/1*7Pv8lCobW-SQ19eEjDol3g.png\"><figcaption>Click on Normal\u00a0Start</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*S1y7Pj7TkmanvKqP0GWAcg.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/534/1*k0q48Ac4wRlCapxx8uJrFg.png\"><figcaption>when you click \u201cAdd\u201d, it shows some\u00a0error</figcaption></figure><p>When you press <em>Add</em>, VirtualBox will suddenly stop working and show you some fatal error. The solution is to manually locate the iso file\u00a0with:</p>\n<ol>\n<li>right-click on the new machine (located on the left side of the VirtualBox UI)</li>\n<li>Settings</li>\n<li>choose the Storage tab on the upper\u00a0part</li>\n<li>\u2193 refer to the image below\u00a0<strong>\u2193</strong>\n</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9Q4romUTukBx2_c89U62Ww.png\"></figure><p>After this, you will be able to rev up the new Ubuntu machine with no problem. The installation process will take some time (at least 10 minutes).</p>\n<h4>After the VM\u00a0Setup</h4>\n<p>The first thing I did was to install <strong>very basic</strong> tools for software developers: a text editing tool and\u00a0Git.</p>\n<ul>\n<li>open Terminal</li>\n<li>sudo apt-get install --upgrade</li>\n<li>sudo apt-get install vim or sudo apt-get install emacs (whichever floats your boat\u2026 can also be nano\u2026 but take a look at the picture below and choose accordingly)</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*QzUi_Y9Jlg_FcrWuetfLnQ.png\"></figure><ul><li>sudo apt install\u00a0git</li></ul>\n<p>Then it was time to install pyenv and\u00a0Python</p>\n<ul>\n<li>\n<a href=\"https://github.com/pyenv/pyenv\">pyenv doc link</a> (I used this doc to install\u00a0pyenv)</li>\n<li>once pyenv is installed, I restarted the login\u00a0session.</li>\n<li>pyenv install\u00a03.7.9</li>\n<li>pyenv versions shows\u00a03.7.9</li>\n<li>pyenv global 3.7.9 to set the global Python\u00a0version</li>\n</ul>\n<p>And lastly, I created the Python environment</p>\n<ul>\n<li>python3 -m venv\u00a0myenv</li>\n<li>source myenv/bin/activate</li>\n</ul>\n<p>Then came all the nitty-gritty of installing Tradir backend project after gaining authentication for the repository, then setting up the pip packages &amp; PSQL server, and etc\u2026 sensitive stuff cannot be posted here. However, I will show you one thing that bothered me every time I tried to set up a local Python environment in the next part: epilogue.</p>\n<h3>Epilogue</h3>\n<p>If your codebase has a lot of packages going on, there is a chance that your Python project\u00a0has</p>\n<p>A. mysqlclient<br>B. psycopg2<br>C. tangled dependencies</p>\n<p>I am going to show you how to solve those problems.</p>\n<p>Navigate into the directory where you have your <em>requirements.txt</em>. If you try to install every package, it will most likely cause some error with \u201cexit code 1\u201d. To fix this you need\u00a0to:</p>\n<ul>\n<li>sudo apt-get install python3-dev defautl-libmysqlclient-dev build-essential</li>\n<li>pip install mysqlclient</li>\n<li>sudo apt-get install libpq-dev python-dev</li>\n</ul>\n<p>And finally:</p>\n<ul><li>pip install --no-deps -r requirements.txt</li></ul>\n<p>because --no-deps solves the tangled dependency issues.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e76a45b7f01\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["pip","markdown","python","ubuntu","documentation"]},{"title":"Auto-generating Data with Django-Migration","pubDate":"2021-06-22 02:06:17","link":"https://nickanism.medium.com/auto-generating-data-with-django-migration-93403c656f68?source=rss-6fe9d0704dae------2","guid":"https://medium.com/p/93403c656f68","author":"Nicholas An","thumbnail":"https://cdn-images-1.medium.com/max/539/1*It6PLgXiaMyY_Y_A10qUuw.png","description":"\n<h3>Auto-generating Data with Django-Migration and Lookup_Field</h3>\n<p>As I was making a whole new API and its model table to be used, here came the necessity to make A LOT of data for every single already-existing user accounts. The first thing that came up to my mind was using python manage.py shell to enter some simple scripts with ORMs. However, I felt like I wanted to do something that was more challenging and fun. Plus, this following approach won\u2019t require dev ops or sys admin to manually write ORM script on the dev/production server. They just have to do exactly what they have been doing like any other day in the\u00a0office.</p>\n<h4>Overriding `save()` Method to Generate Data in the\u00a0Future</h4>\n<p>First, let\u2019s take a look at the case where I made a new\u00a0table.</p>\n<pre>class Report(models.Model):<br>    ALL_TABLE_FIELDS = (<br>        'local_ordered_date', 'card', 'country', 'customer', 'supplier',<br>        'amount', 'currency', 'quantity', 'quantity_unit', </pre>\n<pre>...    )<br>    DEFAULT_TABLE_FIELDS = {<br>        'OrderTrendReport': ('card', 'board', 'customer', 'amount',<br>                             'currency', 'stage', 'owner',      'country',<br>                             'local_ordered_date', 'local_delivery_deadline',<br>                             'order_number'),<br>        ...    </pre>\n<pre>}<br><br>    class ReportType(models.TextChoices):<br>        # hard-coded in order to avoid ImportError and AppRegistryNotReady<br>        OrderTrendReport = 'OrderTrendReport', 'Order Trend report'<br>        RevenueTrendReport = 'RevenueTrendReport', 'Revenue Trend report'<br>        DealSuccessRateReport = 'DealSuccessRateReport', 'Deal Success Rate report'<br>        DealLostReasonReport = 'DealLostReasonReport', 'Deal Lost Reason report'<br>        OrderByCategoryReport = 'OrderByCategoryReport', 'Order By Category report'<br><br>    user = models.ForeignKey(User, on_delete=models.CASCADE)<br>    report_type = models.CharField(choices=ReportType.choices,<br>                                   max_length=50,<br>                                   default=ReportType.OrderTrendReport)<br>    table_fields = ArrayField(models.CharField(max_length=50),<br>                              default=list)<br><br>    @property<br>    def all_table_fields(self):<br>        return self.ALL_TABLE_FIELDS</pre>\n<p>(I had to shorten some parts for brevity)<br>As you can see, there is the Report table, within which ReportType, a TextChoices model class, resides in order to support Report\u2019s report_type field. The main idea is that a Report instance should have a report_typefield as a text choice, and a corresponding default table_fields field. Let\u2019s say, there is an instance that has a report_type field as \u2018OrderTrendReport\u2019. Let\u2019s take a closer look at table_fields:</p>\n<pre>table_fields = ArrayField(models.CharField(max_length=50),<br>                          default=list)</pre>\n<p>You can see that the default is already set for list. You can change this to some callable if you have defined such BEFORE you define the value of default. Surely, I tried that like\u00a0below:</p>\n<pre>def get_default_table_fields(obj):<br>  return obj.DEFAULT_TABLE_FIELDS[obj.report_type]</pre>\n<p>However, this will not work because while Django\u2019s default attribute does take a callable as a default, but it DOES NOT take a callable WITH A PARAMETER.</p>\n<p>The only way to overcome this predicament would be to override the save() method of the models.Model. Like\u00a0below:</p>\n<pre>def save(self, *args, **kwargs):<br>  if not self.pk: # this will ensure that the object is new<br>    self.table_fields = self.DEFAULT_TABLE_FIELDS[self.report_type]<br>  super().save(*args, **kwargs)</pre>\n<p>Awesome! So what\u00a0now?</p>\n<h4>Editing Migration File to Automate Data Generation</h4>\n<p>It\u2019s time to save lots of instances for every single case of report_type for user accounts. Right now, there are about 5 report_types. So if there are 200 users, there should be 1000 instances of Report. Instead of manually doing this on a shell, you can write additional code to execute while migrating.</p>\n<pre>import django.contrib.postgres.fields<br>from django.db import migrations, models<br>import django.db.models.deletion<br><br><br>def make_report_fields(apps, schema_editor):<br>    User = apps.get_model(settings.AUTH_USER_MODEL)<br>    Report = apps.get_model('deal', 'Report')<br>    ReportTypes = ('OrderTrendReport', 'RevenueTrendReport', 'DealSuccessRateReport',<br>                   'DealLostReasonReport', 'OrderByCategoryReport')<br>    report_fields = [Report(user=user, report_type=report_type)<br>                     for report_type in ReportTypes<br>                     for user in User.objects.all()]<br>    Report.objects.bulk_create(report_fields)<br><br>class Migration(migrations.Migration):<br><br>    dependencies = [<br>        migrations.swappable_dependency(settings.AUTH_USER_MODEL),<br>        ('deal', '0059_auto_20210610_0948'),<br>    ]<br><br>    operations = [<br>        migrations.CreateModel(<br>            name='Report',<br>            fields=[<br>                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),<br>                ('report_type', models.CharField(choices=[('OrderTrendReport', 'Order Trend report'), ('RevenueTrendReport', 'Revenue Trend report'), ('DealSuccessRateReport', 'Deal Success Rate report'), ('DealLostReasonReport', 'Deal Lost Reason report'), ('OrderByCategoryReport', 'Order By Category report')], default='OrderTrendReport', max_length=50)),<br>                ('table_fields', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), default=list, size=None)),<br>                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),<br>            ],<br>        ),<br>        migrations.RunPython(make_report_fields)<br>    ]</pre>\n<p>However, the above DID NOT WORK! <br>What happened?</p>\n<p>When you take a look at make_report_fields, you can see that I used bulk_create() in order to make a bunch of data at once. Someone on StackOverflow kindly explained that bulk_create() does not use the save() method of the model but instead works on a SQL level. So I tried putting save() method, running a nested for-loop like\u00a0so:</p>\n<pre>for user in User.objects.all():<br>  for report_type in ReportTypes:<br>    report = Report(user=user, report_type=report_type)<br>    report.save()</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/539/1*It6PLgXiaMyY_Y_A10qUuw.png\"></figure><p>But alas, this still wouldn\u2019t\u00a0work!</p>\n<p>The reason is that the serialized model in the migrations does not have my custom save()\u00a0method.</p>\n<p>So came the last solution: writing the whole dictionary in the migration file.</p>\n<pre>DEFAULT_TABLE_FIELDS = {<br>    'OrderTrendReport': ('card', 'board', 'customer', 'amount',<br>                         'currency', 'stage', 'owner', 'country',<br>                         'local_ordered_date', 'local_delivery_deadline',<br>                         'order_number'),<br>    'RevenueTrendReport': ('card', 'customer', 'invoice_total',<br>                           'payment_total', 'balance', 'currency',<br>                           'owner', 'order_number', 'board'),<br>    'DealSuccessRateReport': ('card', 'board', 'customer', 'amount',<br>                              'currency', 'owner', 'result',<br>                              'local_result_updated_at'),<br>    'DealLostReasonReport': ('card', 'board', 'customer', 'amount',<br>                             'currency', 'owner',<br>                             'local_result_updated_at', 'lost_reason',<br>                             'lost_description'),<br>    'OrderByCategoryReport': ('card', 'board', 'customer', 'amount',<br>                              'currency', 'stage', 'owner', 'country',<br>                              'local_ordered_date', 'local_delivery_deadline',<br>                              'order_number')<br>}<br><br>def make_report_fields(apps, schema_editor):<br>    User = apps.get_model(settings.AUTH_USER_MODEL)<br>    Report = apps.get_model('deal', 'Report')<br>    ReportTypes = ('OrderTrendReport', 'RevenueTrendReport', 'DealSuccessRateReport',<br>                   'DealLostReasonReport', 'OrderByCategoryReport')<br>    for user in User.objects.all():<br>        for report_type in ReportTypes:<br>            report = Report(user=user, report_type=report_type,<br>                            table_fields=DEFAULT_TABLE_FIELDS[report_type])<br>            report.save()</pre>\n<p>This guaranteed that each Report instance has correct table_fields recorded.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=93403c656f68\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Auto-generating Data with Django-Migration and Lookup_Field</h3>\n<p>As I was making a whole new API and its model table to be used, here came the necessity to make A LOT of data for every single already-existing user accounts. The first thing that came up to my mind was using python manage.py shell to enter some simple scripts with ORMs. However, I felt like I wanted to do something that was more challenging and fun. Plus, this following approach won\u2019t require dev ops or sys admin to manually write ORM script on the dev/production server. They just have to do exactly what they have been doing like any other day in the\u00a0office.</p>\n<h4>Overriding `save()` Method to Generate Data in the\u00a0Future</h4>\n<p>First, let\u2019s take a look at the case where I made a new\u00a0table.</p>\n<pre>class Report(models.Model):<br>    ALL_TABLE_FIELDS = (<br>        'local_ordered_date', 'card', 'country', 'customer', 'supplier',<br>        'amount', 'currency', 'quantity', 'quantity_unit', </pre>\n<pre>...    )<br>    DEFAULT_TABLE_FIELDS = {<br>        'OrderTrendReport': ('card', 'board', 'customer', 'amount',<br>                             'currency', 'stage', 'owner',      'country',<br>                             'local_ordered_date', 'local_delivery_deadline',<br>                             'order_number'),<br>        ...    </pre>\n<pre>}<br><br>    class ReportType(models.TextChoices):<br>        # hard-coded in order to avoid ImportError and AppRegistryNotReady<br>        OrderTrendReport = 'OrderTrendReport', 'Order Trend report'<br>        RevenueTrendReport = 'RevenueTrendReport', 'Revenue Trend report'<br>        DealSuccessRateReport = 'DealSuccessRateReport', 'Deal Success Rate report'<br>        DealLostReasonReport = 'DealLostReasonReport', 'Deal Lost Reason report'<br>        OrderByCategoryReport = 'OrderByCategoryReport', 'Order By Category report'<br><br>    user = models.ForeignKey(User, on_delete=models.CASCADE)<br>    report_type = models.CharField(choices=ReportType.choices,<br>                                   max_length=50,<br>                                   default=ReportType.OrderTrendReport)<br>    table_fields = ArrayField(models.CharField(max_length=50),<br>                              default=list)<br><br>    @property<br>    def all_table_fields(self):<br>        return self.ALL_TABLE_FIELDS</pre>\n<p>(I had to shorten some parts for brevity)<br>As you can see, there is the Report table, within which ReportType, a TextChoices model class, resides in order to support Report\u2019s report_type field. The main idea is that a Report instance should have a report_typefield as a text choice, and a corresponding default table_fields field. Let\u2019s say, there is an instance that has a report_type field as \u2018OrderTrendReport\u2019. Let\u2019s take a closer look at table_fields:</p>\n<pre>table_fields = ArrayField(models.CharField(max_length=50),<br>                          default=list)</pre>\n<p>You can see that the default is already set for list. You can change this to some callable if you have defined such BEFORE you define the value of default. Surely, I tried that like\u00a0below:</p>\n<pre>def get_default_table_fields(obj):<br>  return obj.DEFAULT_TABLE_FIELDS[obj.report_type]</pre>\n<p>However, this will not work because while Django\u2019s default attribute does take a callable as a default, but it DOES NOT take a callable WITH A PARAMETER.</p>\n<p>The only way to overcome this predicament would be to override the save() method of the models.Model. Like\u00a0below:</p>\n<pre>def save(self, *args, **kwargs):<br>  if not self.pk: # this will ensure that the object is new<br>    self.table_fields = self.DEFAULT_TABLE_FIELDS[self.report_type]<br>  super().save(*args, **kwargs)</pre>\n<p>Awesome! So what\u00a0now?</p>\n<h4>Editing Migration File to Automate Data Generation</h4>\n<p>It\u2019s time to save lots of instances for every single case of report_type for user accounts. Right now, there are about 5 report_types. So if there are 200 users, there should be 1000 instances of Report. Instead of manually doing this on a shell, you can write additional code to execute while migrating.</p>\n<pre>import django.contrib.postgres.fields<br>from django.db import migrations, models<br>import django.db.models.deletion<br><br><br>def make_report_fields(apps, schema_editor):<br>    User = apps.get_model(settings.AUTH_USER_MODEL)<br>    Report = apps.get_model('deal', 'Report')<br>    ReportTypes = ('OrderTrendReport', 'RevenueTrendReport', 'DealSuccessRateReport',<br>                   'DealLostReasonReport', 'OrderByCategoryReport')<br>    report_fields = [Report(user=user, report_type=report_type)<br>                     for report_type in ReportTypes<br>                     for user in User.objects.all()]<br>    Report.objects.bulk_create(report_fields)<br><br>class Migration(migrations.Migration):<br><br>    dependencies = [<br>        migrations.swappable_dependency(settings.AUTH_USER_MODEL),<br>        ('deal', '0059_auto_20210610_0948'),<br>    ]<br><br>    operations = [<br>        migrations.CreateModel(<br>            name='Report',<br>            fields=[<br>                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),<br>                ('report_type', models.CharField(choices=[('OrderTrendReport', 'Order Trend report'), ('RevenueTrendReport', 'Revenue Trend report'), ('DealSuccessRateReport', 'Deal Success Rate report'), ('DealLostReasonReport', 'Deal Lost Reason report'), ('OrderByCategoryReport', 'Order By Category report')], default='OrderTrendReport', max_length=50)),<br>                ('table_fields', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), default=list, size=None)),<br>                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),<br>            ],<br>        ),<br>        migrations.RunPython(make_report_fields)<br>    ]</pre>\n<p>However, the above DID NOT WORK! <br>What happened?</p>\n<p>When you take a look at make_report_fields, you can see that I used bulk_create() in order to make a bunch of data at once. Someone on StackOverflow kindly explained that bulk_create() does not use the save() method of the model but instead works on a SQL level. So I tried putting save() method, running a nested for-loop like\u00a0so:</p>\n<pre>for user in User.objects.all():<br>  for report_type in ReportTypes:<br>    report = Report(user=user, report_type=report_type)<br>    report.save()</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/539/1*It6PLgXiaMyY_Y_A10qUuw.png\"></figure><p>But alas, this still wouldn\u2019t\u00a0work!</p>\n<p>The reason is that the serialized model in the migrations does not have my custom save()\u00a0method.</p>\n<p>So came the last solution: writing the whole dictionary in the migration file.</p>\n<pre>DEFAULT_TABLE_FIELDS = {<br>    'OrderTrendReport': ('card', 'board', 'customer', 'amount',<br>                         'currency', 'stage', 'owner', 'country',<br>                         'local_ordered_date', 'local_delivery_deadline',<br>                         'order_number'),<br>    'RevenueTrendReport': ('card', 'customer', 'invoice_total',<br>                           'payment_total', 'balance', 'currency',<br>                           'owner', 'order_number', 'board'),<br>    'DealSuccessRateReport': ('card', 'board', 'customer', 'amount',<br>                              'currency', 'owner', 'result',<br>                              'local_result_updated_at'),<br>    'DealLostReasonReport': ('card', 'board', 'customer', 'amount',<br>                             'currency', 'owner',<br>                             'local_result_updated_at', 'lost_reason',<br>                             'lost_description'),<br>    'OrderByCategoryReport': ('card', 'board', 'customer', 'amount',<br>                              'currency', 'stage', 'owner', 'country',<br>                              'local_ordered_date', 'local_delivery_deadline',<br>                              'order_number')<br>}<br><br>def make_report_fields(apps, schema_editor):<br>    User = apps.get_model(settings.AUTH_USER_MODEL)<br>    Report = apps.get_model('deal', 'Report')<br>    ReportTypes = ('OrderTrendReport', 'RevenueTrendReport', 'DealSuccessRateReport',<br>                   'DealLostReasonReport', 'OrderByCategoryReport')<br>    for user in User.objects.all():<br>        for report_type in ReportTypes:<br>            report = Report(user=user, report_type=report_type,<br>                            table_fields=DEFAULT_TABLE_FIELDS[report_type])<br>            report.save()</pre>\n<p>This guaranteed that each Report instance has correct table_fields recorded.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=93403c656f68\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["django","django-rest-framework","python"]},{"title":"Refactoring Massive Python/Django App","pubDate":"2021-05-17 03:06:27","link":"https://nickanism.medium.com/refactoring-massive-python-django-app-94b7ad62c06a?source=rss-6fe9d0704dae------2","guid":"https://medium.com/p/94b7ad62c06a","author":"Nicholas An","thumbnail":"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=94b7ad62c06a","description":"\n<p>So far, I have been working on the company\u2019s backend application(Tradir.io) without paying much attention to how I am going to help other future developers inherit the codebase. However, since I know that I am not going to be working on this codebase forever, and the application is going to last a very long time, I felt a strong need to make the codebase more comprehensible.</p>\n<p>Although, there is no need to refactor every single app in the whole project. The only apps that need to be refactored are the ones with huge files that are hard to\u00a0read.</p>\n<p>The best example would be a bloated serializer class that spans over 260\u00a0lines.</p>\n<pre>class SomeSerializer(serializers.ModelSerializer):<br>    field1 = serializers.SerializerMethodField()<br>    field2 = serializers.SerializerMethodField()<br>    field3 = serializers.StringRelatedField(read_only=True)<br>    field4 = serializers.CharField(required=False, allow_null=True)<br>    .<br>    .<br>    .<br>    get_field1(self, instance):<br>        return OtherSerializer(instance.otherfield).data<br>    get_field2(self, instance):<br>        return OtherSerializer2(instance.otherfield2).data<br>    .<br>    .<br>    .<br>    def create(self, validated_data):<br>        with transaction.atomic():<br>            user = self.context['request'].user<br>            car= Car.objects.create(owner=user, **validated_data)<br><br>            car.add_access(user)<br>            if self.context['others_allowed_to_drive']:<br>                for id in self.context['other_user_ids']:<br>                    added_user = User.objects.get(id=id)<br>                    car.add_access(added_user)<br>            car.save()<br>    .<br>    .<br>    .</pre>\n<p>In the above example, you can see that the create() method, which is the most important method in SomeSerializer, has many lines of code. For now, it is now as big, but it certainly takes more than a few seconds to figure out what the last 6 lines of code do. We can create a separate method for those last 6 lines with appropriate naming.</p>\n<pre>def initialize_caraccess(self, car, user):<br>    car.add_access(user)<br>    if self.context['others_allowed_to_drive']:<br>        for id in self.context['other_user_ids']:<br>            added_user = User.objects.get(id=id)<br>            car.add_access(added_user)<br>    car.save()</pre>\n<p>Now, the create() method can be shorter and more semantic.</p>\n<pre>def initialize_caraccess(self, car, user):<br>    .<br>    .<br>    .    <br>    car.save()</pre>\n<pre>def create(self, validated_data):<br>        with transaction.atomic():<br>            user = self.context['request'].user<br>            car= Car.objects.create(owner=user, **validated_data)<br><br>            self.initialize_caraccess(self, car, user)</pre>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=94b7ad62c06a\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>So far, I have been working on the company\u2019s backend application(Tradir.io) without paying much attention to how I am going to help other future developers inherit the codebase. However, since I know that I am not going to be working on this codebase forever, and the application is going to last a very long time, I felt a strong need to make the codebase more comprehensible.</p>\n<p>Although, there is no need to refactor every single app in the whole project. The only apps that need to be refactored are the ones with huge files that are hard to\u00a0read.</p>\n<p>The best example would be a bloated serializer class that spans over 260\u00a0lines.</p>\n<pre>class SomeSerializer(serializers.ModelSerializer):<br>    field1 = serializers.SerializerMethodField()<br>    field2 = serializers.SerializerMethodField()<br>    field3 = serializers.StringRelatedField(read_only=True)<br>    field4 = serializers.CharField(required=False, allow_null=True)<br>    .<br>    .<br>    .<br>    get_field1(self, instance):<br>        return OtherSerializer(instance.otherfield).data<br>    get_field2(self, instance):<br>        return OtherSerializer2(instance.otherfield2).data<br>    .<br>    .<br>    .<br>    def create(self, validated_data):<br>        with transaction.atomic():<br>            user = self.context['request'].user<br>            car= Car.objects.create(owner=user, **validated_data)<br><br>            car.add_access(user)<br>            if self.context['others_allowed_to_drive']:<br>                for id in self.context['other_user_ids']:<br>                    added_user = User.objects.get(id=id)<br>                    car.add_access(added_user)<br>            car.save()<br>    .<br>    .<br>    .</pre>\n<p>In the above example, you can see that the create() method, which is the most important method in SomeSerializer, has many lines of code. For now, it is now as big, but it certainly takes more than a few seconds to figure out what the last 6 lines of code do. We can create a separate method for those last 6 lines with appropriate naming.</p>\n<pre>def initialize_caraccess(self, car, user):<br>    car.add_access(user)<br>    if self.context['others_allowed_to_drive']:<br>        for id in self.context['other_user_ids']:<br>            added_user = User.objects.get(id=id)<br>            car.add_access(added_user)<br>    car.save()</pre>\n<p>Now, the create() method can be shorter and more semantic.</p>\n<pre>def initialize_caraccess(self, car, user):<br>    .<br>    .<br>    .    <br>    car.save()</pre>\n<pre>def create(self, validated_data):<br>        with transaction.atomic():<br>            user = self.context['request'].user<br>            car= Car.objects.create(owner=user, **validated_data)<br><br>            self.initialize_caraccess(self, car, user)</pre>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=94b7ad62c06a\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["python","django","refactoring"]},{"title":"(Django) Customized Soft-Deletion Cascade","pubDate":"2021-03-30 04:09:41","link":"https://nickanism.medium.com/django-customized-soft-deletion-cascade-504436875842?source=rss-6fe9d0704dae------2","guid":"https://medium.com/p/504436875842","author":"Nicholas An","thumbnail":"https://cdn-images-1.medium.com/max/200/1*k2g3jobm5LSiIaXyyHozeg.png","description":"\n<p>A while ago, I was given a huge task to implement soft deletion on several models of our app. I was going to just use the existing Django package that automatically handles soft deletion, but since my co-worker already made his own soft deletion for one model in the app, the package would cause some complications regarding this model. I could have gone ahead and changed that very model in question so that I could apply this convenient package, but then I wanted to do this on my own\u00a0somehow\u2026</p>\n<p>And thus, I created a separate directory and a file within it because utils.py in our default project directory was getting enormously huge and complicated. Everything in utils.py got moved to utils/utils.py, and I created soft_cascade.py in the utils directory.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/200/1*k2g3jobm5LSiIaXyyHozeg.png\"><figcaption>default project directory (tradeforce)</figcaption></figure><p>Let\u2019s take a look at the alteration I made with the models to be applied soft-deletion. Since there is a lot going on, I replaced all the fields unrelated to this post with\u00a0periods.</p>\n<pre>class Board(models.Model, ReusableModelMethodsMixin):<br>    .<br>    .<br>    .</pre>\n<pre>is_deleted = models.BooleanField(default=False)<br>    objects = ReusableQuerySetMethods.as_manager()<br>    deleted = DeletedManager()<br>    .<br>    .<br>    .<br>    class Meta:<br>    db_table = 'boards'<br>    base_manager_name = 'objects'<br>    ordering = ['created_at']<br>.<br>.<br>.<br>class CardQuerySet(ReusableQuerySetMethods):<br><em>''' Card QuerySet '''<br><br></em>def archived(self):<br><em>\"\"\" return card objects that have been archived \"\"\"<br></em>return self.filter(is_archived=True)<br>    .<br>    .<br>    .<br>class Card(models.Model, ReusableModelMethodsMixin):<br>    .<br>    .<br>    .<br>    objects = CardQuerySet.as_manager()<br>    deleted = DeletedManager()<br>    is_deleted = models.BooleanField(default=False)<br>    .<br>    .<br>    .<br>    class Meta:<br>    db_table = 'cards'<br>    base_manager_name = 'objects'</pre>\n<p>Notice that the model classes have is_deleted which is boolean. This field decides whether an instance is deleted or not without actually deleting it. When someone decides to delete a board instance via API, (the destroy function of which is switched from\u00a0.delete() to\u00a0.soft_delete()) that act won\u2019t delete this instance, but instead, switch this instance\u2019s is_delete status from False to True. Nothing disappeared from the database.</p>\n<p>However, the problem occurs when we are trying to use querysets to bring about a set of active boards. At my previous company, they were just using Board.objects.filter(is_deleted=False) on every single related APIs and etc. This requires a lot of attention in itself, making it hard to maintain. If you ever forget to write Board.obejects.filter(is_deleted=False) in any APIs, it will mindlessly show all the instances regardless of whether it got soft-deleted or not. And we don\u2019t want\u00a0that\u2026</p>\n<p>I implemented a solution to automatically exclude is_deleted=True when using the default manager, which is objects. One way to do this is to use custom querysets. Notice that objects was overridden by declaring objects = ReusableQuerySetMethods.as_manager().</p>\n<p>Now let\u2019s take a look at all the things related to this soft-deletion.</p>\n<p>soft_cascade.py</p>\n<pre>from contextlib import suppress<br><br>from django.contrib.contenttypes.fields import GenericRelation<br>from django.core.exceptions import ObjectDoesNotExist<br>from django.db import transaction, models<br>from django.db.models import ForeignObjectRel<br><br><br>def find_reversely_related_models(instance):<br>    links = [field.get_accessor_name() for field in instance._meta.get_fields()<br>             if (issubclass(type(field), ForeignObjectRel)<br>             and hasattr(field.related_model, 'has_soft_delete'))]<br>    links_for_generic = [field.name for field in instance._meta.get_fields()<br>             if (issubclass(type(field), GenericRelation)<br>             and hasattr(field.related_model, 'has_soft_delete'))]<br><br>    return links + links_for_generic<br><br>def related_objs_soft_cascade(instance):<br>    links = find_reversely_related_models(instance)<br>    if not links:<br>        return<br>    for link in links:<br>        if ( hasattr(instance, link) and<br>            issubclass(eval(f'instance.{link}.__class__'), models.base.Model) ):<br>            with suppress(ObjectDoesNotExist, AttributeError):<br>                exec(f'instance.{link}.soft_delete()')<br>        else:<br>            with suppress(ObjectDoesNotExist, AttributeError):<br>                exec(f'instance.{link}.all().qs_soft_delete()')<br><br>class ReusableModelMethodsMixin:<br><br>    def soft_delete(self):<br>        with transaction.atomic():<br>            self.is_deleted = True<br>            self.save()<br><br>            related_objs_soft_cascade(self)<br><br>    # helps us pick the models with soft_delete() method.<br>    has_soft_delete = True<br><br><br>class ReusableQuerySetMethods(models.query.QuerySet):<br><br>    @classmethod<br>    def as_manager(cls):<br>        manager = SoftDeleteManager.from_queryset(cls)()<br>        manager._built_with_as_manager = True<br>        return manager<br><br>    def qs_soft_delete(self, *args, **kwargs):<br>        for instance in self:<br>            instance.soft_delete()<br>        self._result_cache = None<br>    qs_soft_delete.alters_data = True<br><br><br>class SoftDeleteManager(models.Manager):<br><br>    def get_queryset(self):<br>        return super().get_queryset().filter(is_deleted=False)<br><br><br>class DeletedManager(models.Manager):<br><br>    def get_queryset(self):<br>        return super().get_queryset().filter(is_deleted=True)</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/645/1*qdlExip_dC9EAOes1dFX9A.png\"></figure><p>Notice that the ReusableQuerySetMethods overrides its parent class\u2019s as_manager method. The method, manager = SoftDeleteManager.from_queryset(cls)() tells itself that the manager now derives from SoftDeleteManager Manager class. This SoftDeleteManager overrides the get_queryset method and adds on a filter: filter(is_deleted=False).</p>\n<p>Now, take a look at def soft_delete() in ReusableModelMethodsMixin. The mixin\u2019s soft_delete() will be available for every single model that inherits ReusableModelMethodsMixin.</p>\n<p>Here is the most interesting part: cascading. When soft_delete launches, it eventually goes to related_objs_soft_cascade. related_objs_soft_cascade then inspects every instance and sees if any of them has reversely-related objects that also have soft_delete(). If they find an object that has many reversely-related objects, that is_deleted of which must be changed to True, then it will initiate qs_soft_delete() in ReusableQuerySetMethods. qs_soft_delete() runs a for-loop to run soft_delete() on every related instance, which then goes on to related_objs_soft_cascade and on to qs_soft_delete(), and so\u00a0on\u2026</p>\n<p>Let\u2019s say there is a board. And there are two card lists, each of which contains 10 cards. If you decide to delete the board, it will run soft_delete() on that instance, which then runs related_objs_soft_cascade, which runs qs_soft_delete() on card lists queryset. Then each card list will run soft_delete(). Each of which will run related_objs_soft_cascade then qs_soft_delete(). This initiates soft_delete() on every single related card instance.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=504436875842\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>A while ago, I was given a huge task to implement soft deletion on several models of our app. I was going to just use the existing Django package that automatically handles soft deletion, but since my co-worker already made his own soft deletion for one model in the app, the package would cause some complications regarding this model. I could have gone ahead and changed that very model in question so that I could apply this convenient package, but then I wanted to do this on my own\u00a0somehow\u2026</p>\n<p>And thus, I created a separate directory and a file within it because utils.py in our default project directory was getting enormously huge and complicated. Everything in utils.py got moved to utils/utils.py, and I created soft_cascade.py in the utils directory.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/200/1*k2g3jobm5LSiIaXyyHozeg.png\"><figcaption>default project directory (tradeforce)</figcaption></figure><p>Let\u2019s take a look at the alteration I made with the models to be applied soft-deletion. Since there is a lot going on, I replaced all the fields unrelated to this post with\u00a0periods.</p>\n<pre>class Board(models.Model, ReusableModelMethodsMixin):<br>    .<br>    .<br>    .</pre>\n<pre>is_deleted = models.BooleanField(default=False)<br>    objects = ReusableQuerySetMethods.as_manager()<br>    deleted = DeletedManager()<br>    .<br>    .<br>    .<br>    class Meta:<br>    db_table = 'boards'<br>    base_manager_name = 'objects'<br>    ordering = ['created_at']<br>.<br>.<br>.<br>class CardQuerySet(ReusableQuerySetMethods):<br><em>''' Card QuerySet '''<br><br></em>def archived(self):<br><em>\"\"\" return card objects that have been archived \"\"\"<br></em>return self.filter(is_archived=True)<br>    .<br>    .<br>    .<br>class Card(models.Model, ReusableModelMethodsMixin):<br>    .<br>    .<br>    .<br>    objects = CardQuerySet.as_manager()<br>    deleted = DeletedManager()<br>    is_deleted = models.BooleanField(default=False)<br>    .<br>    .<br>    .<br>    class Meta:<br>    db_table = 'cards'<br>    base_manager_name = 'objects'</pre>\n<p>Notice that the model classes have is_deleted which is boolean. This field decides whether an instance is deleted or not without actually deleting it. When someone decides to delete a board instance via API, (the destroy function of which is switched from\u00a0.delete() to\u00a0.soft_delete()) that act won\u2019t delete this instance, but instead, switch this instance\u2019s is_delete status from False to True. Nothing disappeared from the database.</p>\n<p>However, the problem occurs when we are trying to use querysets to bring about a set of active boards. At my previous company, they were just using Board.objects.filter(is_deleted=False) on every single related APIs and etc. This requires a lot of attention in itself, making it hard to maintain. If you ever forget to write Board.obejects.filter(is_deleted=False) in any APIs, it will mindlessly show all the instances regardless of whether it got soft-deleted or not. And we don\u2019t want\u00a0that\u2026</p>\n<p>I implemented a solution to automatically exclude is_deleted=True when using the default manager, which is objects. One way to do this is to use custom querysets. Notice that objects was overridden by declaring objects = ReusableQuerySetMethods.as_manager().</p>\n<p>Now let\u2019s take a look at all the things related to this soft-deletion.</p>\n<p>soft_cascade.py</p>\n<pre>from contextlib import suppress<br><br>from django.contrib.contenttypes.fields import GenericRelation<br>from django.core.exceptions import ObjectDoesNotExist<br>from django.db import transaction, models<br>from django.db.models import ForeignObjectRel<br><br><br>def find_reversely_related_models(instance):<br>    links = [field.get_accessor_name() for field in instance._meta.get_fields()<br>             if (issubclass(type(field), ForeignObjectRel)<br>             and hasattr(field.related_model, 'has_soft_delete'))]<br>    links_for_generic = [field.name for field in instance._meta.get_fields()<br>             if (issubclass(type(field), GenericRelation)<br>             and hasattr(field.related_model, 'has_soft_delete'))]<br><br>    return links + links_for_generic<br><br>def related_objs_soft_cascade(instance):<br>    links = find_reversely_related_models(instance)<br>    if not links:<br>        return<br>    for link in links:<br>        if ( hasattr(instance, link) and<br>            issubclass(eval(f'instance.{link}.__class__'), models.base.Model) ):<br>            with suppress(ObjectDoesNotExist, AttributeError):<br>                exec(f'instance.{link}.soft_delete()')<br>        else:<br>            with suppress(ObjectDoesNotExist, AttributeError):<br>                exec(f'instance.{link}.all().qs_soft_delete()')<br><br>class ReusableModelMethodsMixin:<br><br>    def soft_delete(self):<br>        with transaction.atomic():<br>            self.is_deleted = True<br>            self.save()<br><br>            related_objs_soft_cascade(self)<br><br>    # helps us pick the models with soft_delete() method.<br>    has_soft_delete = True<br><br><br>class ReusableQuerySetMethods(models.query.QuerySet):<br><br>    @classmethod<br>    def as_manager(cls):<br>        manager = SoftDeleteManager.from_queryset(cls)()<br>        manager._built_with_as_manager = True<br>        return manager<br><br>    def qs_soft_delete(self, *args, **kwargs):<br>        for instance in self:<br>            instance.soft_delete()<br>        self._result_cache = None<br>    qs_soft_delete.alters_data = True<br><br><br>class SoftDeleteManager(models.Manager):<br><br>    def get_queryset(self):<br>        return super().get_queryset().filter(is_deleted=False)<br><br><br>class DeletedManager(models.Manager):<br><br>    def get_queryset(self):<br>        return super().get_queryset().filter(is_deleted=True)</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/645/1*qdlExip_dC9EAOes1dFX9A.png\"></figure><p>Notice that the ReusableQuerySetMethods overrides its parent class\u2019s as_manager method. The method, manager = SoftDeleteManager.from_queryset(cls)() tells itself that the manager now derives from SoftDeleteManager Manager class. This SoftDeleteManager overrides the get_queryset method and adds on a filter: filter(is_deleted=False).</p>\n<p>Now, take a look at def soft_delete() in ReusableModelMethodsMixin. The mixin\u2019s soft_delete() will be available for every single model that inherits ReusableModelMethodsMixin.</p>\n<p>Here is the most interesting part: cascading. When soft_delete launches, it eventually goes to related_objs_soft_cascade. related_objs_soft_cascade then inspects every instance and sees if any of them has reversely-related objects that also have soft_delete(). If they find an object that has many reversely-related objects, that is_deleted of which must be changed to True, then it will initiate qs_soft_delete() in ReusableQuerySetMethods. qs_soft_delete() runs a for-loop to run soft_delete() on every related instance, which then goes on to related_objs_soft_cascade and on to qs_soft_delete(), and so\u00a0on\u2026</p>\n<p>Let\u2019s say there is a board. And there are two card lists, each of which contains 10 cards. If you decide to delete the board, it will run soft_delete() on that instance, which then runs related_objs_soft_cascade, which runs qs_soft_delete() on card lists queryset. Then each card list will run soft_delete(). Each of which will run related_objs_soft_cascade then qs_soft_delete(). This initiates soft_delete() on every single related card instance.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=504436875842\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["django","python"]},{"title":"(Python) Combining and Concatenating Strings","pubDate":"2021-03-17 07:03:01","link":"https://nickanism.medium.com/python-combining-and-concatenating-strings-a32207c42309?source=rss-6fe9d0704dae------2","guid":"https://medium.com/p/a32207c42309","author":"Nicholas An","thumbnail":"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a32207c42309","description":"\n<p>You want to combine many small strings together into a larger string. Usually, + works well enough for small operations.</p>\n<pre>&gt;&gt;&gt; a = 'Is Chicago'<br>&gt;&gt;&gt; b = 'Not Chicago?'<br>&gt;&gt;&gt; a + ' ' + b<br>'Is Chicago Not Chicago?'</pre>\n<p>However, when you have many strings to join, using + is inefficient and slow due to the memory copies and garbage collection.</p>\n<p>Don\u2019t do\u00a0this:</p>\n<pre>s = ''<br>for p in parts:<br>    s += p</pre>\n<p>This is much slower than using the join() method, mainly because each += operation creates a new string object. One related trick is the conversion of data to strings and concatenation at the same time using a generator expression.</p>\n<pre>&gt;&gt;&gt; data = ['ACME', 50, 91.1]<br>&gt;&gt;&gt; ','.join(str(d) for d in data)<br>'ACME,50,91.1'</pre>\n<p>Also, be on the lookout for unnecessary string concatenations. For example, do not do\u00a0this:</p>\n<pre>print(a + ':' + b + ':' + c)<br>print(':'.join([a, b, c]))</pre>\n<p>Instead, do\u00a0this:</p>\n<pre>print(a, b, c, sep=':')</pre>\n<p>Last, but not least, if you are writing code that is building output from lots of small strings, you might consider writing that code as a generator function, using yield to emit fragments.</p>\n<pre>def sample():<br>    yield 'Is'<br>    yield 'Chicago'<br>    yield 'Not'<br>    yield 'Chicago'</pre>\n<p>The interesting thing about this approach is that it makes no assumption about how the fragments are to be assembled together. For example, you could simply join the fragments using\u00a0join().</p>\n<p>text = ''.join(sample())</p>\n<p>Or you could redirect the fragments to\u00a0I/O:</p>\n<pre>for part in sample():<br>    f.write(part)</pre>\n<p>Or you could come up with some kind of hybrid scheme that\u2019s smart about combining I/O operations:</p>\n<pre>def combine(source, maxsize):<br>    parts = []<br>    size = 0<br>    for part in source:<br>        parts.append(part)<br>        size += len(part)<br>        if size &gt; maxsize:<br>            yield ''.join(parts)<br>            parts = []<br>            size = 0<br>    yield ''.join(parts)</pre>\n<pre>for part in combine(sample(), 32768):<br>    f.write(part)</pre>\n<p>The key point is that the original generator function doesn\u2019t have to know the precise details. It just yields the\u00a0parts.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a32207c42309\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>You want to combine many small strings together into a larger string. Usually, + works well enough for small operations.</p>\n<pre>&gt;&gt;&gt; a = 'Is Chicago'<br>&gt;&gt;&gt; b = 'Not Chicago?'<br>&gt;&gt;&gt; a + ' ' + b<br>'Is Chicago Not Chicago?'</pre>\n<p>However, when you have many strings to join, using + is inefficient and slow due to the memory copies and garbage collection.</p>\n<p>Don\u2019t do\u00a0this:</p>\n<pre>s = ''<br>for p in parts:<br>    s += p</pre>\n<p>This is much slower than using the join() method, mainly because each += operation creates a new string object. One related trick is the conversion of data to strings and concatenation at the same time using a generator expression.</p>\n<pre>&gt;&gt;&gt; data = ['ACME', 50, 91.1]<br>&gt;&gt;&gt; ','.join(str(d) for d in data)<br>'ACME,50,91.1'</pre>\n<p>Also, be on the lookout for unnecessary string concatenations. For example, do not do\u00a0this:</p>\n<pre>print(a + ':' + b + ':' + c)<br>print(':'.join([a, b, c]))</pre>\n<p>Instead, do\u00a0this:</p>\n<pre>print(a, b, c, sep=':')</pre>\n<p>Last, but not least, if you are writing code that is building output from lots of small strings, you might consider writing that code as a generator function, using yield to emit fragments.</p>\n<pre>def sample():<br>    yield 'Is'<br>    yield 'Chicago'<br>    yield 'Not'<br>    yield 'Chicago'</pre>\n<p>The interesting thing about this approach is that it makes no assumption about how the fragments are to be assembled together. For example, you could simply join the fragments using\u00a0join().</p>\n<p>text = ''.join(sample())</p>\n<p>Or you could redirect the fragments to\u00a0I/O:</p>\n<pre>for part in sample():<br>    f.write(part)</pre>\n<p>Or you could come up with some kind of hybrid scheme that\u2019s smart about combining I/O operations:</p>\n<pre>def combine(source, maxsize):<br>    parts = []<br>    size = 0<br>    for part in source:<br>        parts.append(part)<br>        size += len(part)<br>        if size &gt; maxsize:<br>            yield ''.join(parts)<br>            parts = []<br>            size = 0<br>    yield ''.join(parts)</pre>\n<pre>for part in combine(sample(), 32768):<br>    f.write(part)</pre>\n<p>The key point is that the original generator function doesn\u2019t have to know the precise details. It just yields the\u00a0parts.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a32207c42309\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["python"]},{"title":"(Python) Transforming and Reducing Data at the Same Time","pubDate":"2021-03-17 05:24:39","link":"https://nickanism.medium.com/python-transforming-and-reducing-data-at-the-same-time-5fedd72cc9da?source=rss-6fe9d0704dae------2","guid":"https://medium.com/p/5fedd72cc9da","author":"Nicholas An","thumbnail":"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5fedd72cc9da","description":"\n<p>Let\u2019s say you need to use a reduction function like sum() or min() in order to get calculate the sum of squares. A good way to do this would be to use a generator-expression argument for data reduction and transformation.</p>\n<p>You would do something like\u00a0this:</p>\n<pre>nums = [1, 2, 3, 4, 5]<br>s = sum(x * x for x in nums)</pre>\n<p>The above shows a syntactic aspect of generator expressions when supplied as the single argument to a function: YOU DO NOT NEED REPEATED PARENTHESES! For instance, these statements are the\u00a0same:</p>\n<pre>s = sum((x * x for x in nums))   # pass generator-expr as argument<br>s = sum(x * x for x in nums)   # more elegant syntax</pre>\n<p>If you didn\u2019t use a generator expression, you would do something like\u00a0this:</p>\n<pre>nums = [1, 2, 3, 4, 5]<br>s = sum([x * x for x in nums])</pre>\n<p>This works, but it introduces an extra step and creates an extra list. If nums was huge, you would end up creating a large temporary data structure to only be used once and discarded. The generator solution transforms the data iteratively and is therefore much more memory-efficient.</p>\n<p>Some reduction functions such as min() and max() accept a key argument that might be useful in situations where you might be inclined to use a generator. Like\u00a0so:</p>\n<pre># original: returns 20<br>min_shares = min(s['shares'] for s in portfolio)</pre>\n<pre># alternative: returns {'name': 'AOL', 'shares': 20}<br>min_shares = min(portfolio, key=lambda s: s['shares'])</pre>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5fedd72cc9da\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Let\u2019s say you need to use a reduction function like sum() or min() in order to get calculate the sum of squares. A good way to do this would be to use a generator-expression argument for data reduction and transformation.</p>\n<p>You would do something like\u00a0this:</p>\n<pre>nums = [1, 2, 3, 4, 5]<br>s = sum(x * x for x in nums)</pre>\n<p>The above shows a syntactic aspect of generator expressions when supplied as the single argument to a function: YOU DO NOT NEED REPEATED PARENTHESES! For instance, these statements are the\u00a0same:</p>\n<pre>s = sum((x * x for x in nums))   # pass generator-expr as argument<br>s = sum(x * x for x in nums)   # more elegant syntax</pre>\n<p>If you didn\u2019t use a generator expression, you would do something like\u00a0this:</p>\n<pre>nums = [1, 2, 3, 4, 5]<br>s = sum([x * x for x in nums])</pre>\n<p>This works, but it introduces an extra step and creates an extra list. If nums was huge, you would end up creating a large temporary data structure to only be used once and discarded. The generator solution transforms the data iteratively and is therefore much more memory-efficient.</p>\n<p>Some reduction functions such as min() and max() accept a key argument that might be useful in situations where you might be inclined to use a generator. Like\u00a0so:</p>\n<pre># original: returns 20<br>min_shares = min(s['shares'] for s in portfolio)</pre>\n<pre># alternative: returns {'name': 'AOL', 'shares': 20}<br>min_shares = min(portfolio, key=lambda s: s['shares'])</pre>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5fedd72cc9da\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["python"]},{"title":"Tradir.io Onboarding Journey","pubDate":"2021-02-03 07:31:53","link":"https://nickanism.medium.com/tradir-io-onboarding-journey-e12aab190ae?source=rss-6fe9d0704dae------2","guid":"https://medium.com/p/e12aab190ae","author":"Nicholas An","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*RoLjtuQKChOnU1_R5NGKMA.png","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RoLjtuQKChOnU1_R5NGKMA.png\"></figure><p>This morning, I have decided that I will procrastinate learning PyTest because it\u2019s projected to take a very long time\u200a\u2014\u200athe pdf manual of PyTest alone is 400 pages and I also have to read PyTest-Django package manual and DRF\u2019s own testing modules manuals. My boss told me I shouldn\u2019t spend too much time learning those. And thus my decision to go back to using TestCase from pure Django. Once I will have created some basic unit tests for \u2018user\u2019, \u2018contacts\u2019, and \u2018deal\u2019 apps in the project, I will then move on to start delving into PyTest and other auxiliary packages.</p>\n<p>Now my unit tests look less\u00a0cryptic.</p>\n<pre>import pytest<br>import json<br><br>from django.urls import reverse<br>from django.contrib.auth.models import User<br>from django.test import Client, TestCase<br>from mixer.backend.django import mixer<br><br>from user.models import SocialLoginPlatform, Team<br>from contacts.models import Country<br><br><br>pytestmark = pytest.mark.django_db<br><br>client = Client()<br>HEADER = {'content-type': 'application/json' }<br>CONTENT_TYPE = 'application/json'<br><br><br>class UserTestCase(TestCase):<br><br>    def setUp(self):<br>        for i in range(50):<br>            mixer.blend(Country)<br><br>        SocialLoginPlatform.objects.create(name=\"none\")<br>        SocialLoginPlatform.objects.create(name=\"google\")<br>        User.objects.create(first_name=\"Nick\", last_name=\"An\",<br>                            username=\"nickanism\")<br>        Team.objects.create(company_name=\"Random Company\")<br><br>    def tearDown(self):<br>        User.objects.all().delete()<br>        SocialLoginPlatform.objects.all().delete()<br>        Country.objects.all().delete()<br><br>    def testUserCreated(self):<br>        user = User.objects.get(last_name='An')<br>        assert user.first_name == \"Nick\"<br><br>    def testProfileIsCreated(self):<br>        user = User.objects.get(last_name='An')<br>        assert user.profile != None<br><br>    def testUserTeamCreated(self):<br>        team = Team.objects.get(company_name=\"Random Company\")<br>        assert team != None<br><br>    def testCountryListView(self):<br>        response = self.client.get(\"/api/country/list/\")<br>        response_content = json.loads(response.content)<br>        assert response.status_code == 200<br>        assert response_content[\"country_list\"] != None<br><br>    def testAdminSignUpLoginView(self):<br>        data = {<br>            \"company_name\": \"Random_Company_02\",<br>            \"country_id\": 14,<br>            \"email\": \"lnrdwd@goreadit.site\",<br>            \"language\": \"en\",<br>            \"name\": \"Rand Minit\",<br>            \"password\": \"12345678\"<br>        }<br>        data = json.dumps(data)<br>        response = self.client.post('/api/user/signup/admin/',<br>                                    data=data,<br>                                    content_type=CONTENT_TYPE)<br>        assert response.status_code == 200<br>        assert json.loads(response.content)['Authorization'] != None<br><br>        data2 = {<br>            \"email\": \"lnrdwd@goreadit.site\",<br>            \"password\": \"12345678\"<br>        }<br>        data = json.dumps(data)<br>        response = self.client.post('/api/user/login/',<br>                                    data=data2,<br>                                    content_type=CONTENT_TYPE)<br>        assert response.status_code == 200<br><br>    def testUserProfileChange(self):<br>        user = User.objects.get(last_name=\"An\")<br>        assert user != None<br>        profile = user.profile<br>        assert profile != None<br>        assert profile.name == None<br>        profile.name = \"bodega\"<br>        profile.save()<br>        assert profile.name == \"bodega\"<br>        team = Team.objects.get(company_name=\"Random Company\")<br>        profile.team = team<br>        profile.save()<br>        assert profile.team != None<br>        assert profile.timezone == \"Asia/Seoul\"<br>        assert profile.language == \"en\"<br>        assert profile.auth == 3</pre>\n<p>The First step to a successful onboarding is figuring out the models. Of course, I needed to ask the backend engineer what models the project is currently using and what models it doesn\u2019t. It\u2019s quite import to rule out the deprecated tables because they are essential a waste of\u00a0time.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e12aab190ae\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RoLjtuQKChOnU1_R5NGKMA.png\"></figure><p>This morning, I have decided that I will procrastinate learning PyTest because it\u2019s projected to take a very long time\u200a\u2014\u200athe pdf manual of PyTest alone is 400 pages and I also have to read PyTest-Django package manual and DRF\u2019s own testing modules manuals. My boss told me I shouldn\u2019t spend too much time learning those. And thus my decision to go back to using TestCase from pure Django. Once I will have created some basic unit tests for \u2018user\u2019, \u2018contacts\u2019, and \u2018deal\u2019 apps in the project, I will then move on to start delving into PyTest and other auxiliary packages.</p>\n<p>Now my unit tests look less\u00a0cryptic.</p>\n<pre>import pytest<br>import json<br><br>from django.urls import reverse<br>from django.contrib.auth.models import User<br>from django.test import Client, TestCase<br>from mixer.backend.django import mixer<br><br>from user.models import SocialLoginPlatform, Team<br>from contacts.models import Country<br><br><br>pytestmark = pytest.mark.django_db<br><br>client = Client()<br>HEADER = {'content-type': 'application/json' }<br>CONTENT_TYPE = 'application/json'<br><br><br>class UserTestCase(TestCase):<br><br>    def setUp(self):<br>        for i in range(50):<br>            mixer.blend(Country)<br><br>        SocialLoginPlatform.objects.create(name=\"none\")<br>        SocialLoginPlatform.objects.create(name=\"google\")<br>        User.objects.create(first_name=\"Nick\", last_name=\"An\",<br>                            username=\"nickanism\")<br>        Team.objects.create(company_name=\"Random Company\")<br><br>    def tearDown(self):<br>        User.objects.all().delete()<br>        SocialLoginPlatform.objects.all().delete()<br>        Country.objects.all().delete()<br><br>    def testUserCreated(self):<br>        user = User.objects.get(last_name='An')<br>        assert user.first_name == \"Nick\"<br><br>    def testProfileIsCreated(self):<br>        user = User.objects.get(last_name='An')<br>        assert user.profile != None<br><br>    def testUserTeamCreated(self):<br>        team = Team.objects.get(company_name=\"Random Company\")<br>        assert team != None<br><br>    def testCountryListView(self):<br>        response = self.client.get(\"/api/country/list/\")<br>        response_content = json.loads(response.content)<br>        assert response.status_code == 200<br>        assert response_content[\"country_list\"] != None<br><br>    def testAdminSignUpLoginView(self):<br>        data = {<br>            \"company_name\": \"Random_Company_02\",<br>            \"country_id\": 14,<br>            \"email\": \"lnrdwd@goreadit.site\",<br>            \"language\": \"en\",<br>            \"name\": \"Rand Minit\",<br>            \"password\": \"12345678\"<br>        }<br>        data = json.dumps(data)<br>        response = self.client.post('/api/user/signup/admin/',<br>                                    data=data,<br>                                    content_type=CONTENT_TYPE)<br>        assert response.status_code == 200<br>        assert json.loads(response.content)['Authorization'] != None<br><br>        data2 = {<br>            \"email\": \"lnrdwd@goreadit.site\",<br>            \"password\": \"12345678\"<br>        }<br>        data = json.dumps(data)<br>        response = self.client.post('/api/user/login/',<br>                                    data=data2,<br>                                    content_type=CONTENT_TYPE)<br>        assert response.status_code == 200<br><br>    def testUserProfileChange(self):<br>        user = User.objects.get(last_name=\"An\")<br>        assert user != None<br>        profile = user.profile<br>        assert profile != None<br>        assert profile.name == None<br>        profile.name = \"bodega\"<br>        profile.save()<br>        assert profile.name == \"bodega\"<br>        team = Team.objects.get(company_name=\"Random Company\")<br>        profile.team = team<br>        profile.save()<br>        assert profile.team != None<br>        assert profile.timezone == \"Asia/Seoul\"<br>        assert profile.language == \"en\"<br>        assert profile.auth == 3</pre>\n<p>The First step to a successful onboarding is figuring out the models. Of course, I needed to ask the backend engineer what models the project is currently using and what models it doesn\u2019t. It\u2019s quite import to rule out the deprecated tables because they are essential a waste of\u00a0time.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e12aab190ae\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["django","python"]},{"title":"A New Start","pubDate":"2021-02-02 12:30:34","link":"https://nickanism.medium.com/a-new-start-2aa64b0257a?source=rss-6fe9d0704dae------2","guid":"https://medium.com/p/2aa64b0257a","author":"Nicholas An","thumbnail":"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2aa64b0257a","description":"\n<p>Since last Tuesday, I have started working at a new company: Tradir. Tradir is the company responsible for tradir.io, which is a collaboration web app for international trade. Leaving behind the previous project (brought to you by Hodosoft) was no easy process but the challenges at Tradir are much more burdensome. First of all, the codebase flaunts all sorts of advanced features of Python and Django. It\u2019s been a week and I still have no idea how I am going to catch up with this. I need to create some sort of roadmap for just the onboarding process.</p>\n<p>So far, I have crafted some unit tests. They take about 1 percent of the whole list of the Tradir application. Gotta start somewhere.</p>\n<pre>import pytest<br>import json<br><br>from django.urls import reverse<br>from django.contrib.auth.models import User<br>from django.test import Client<br>from mixer.backend.django import mixer<br><br>from user.models import SocialLoginPlatform<br>from contacts.models import Country<br><br><br>pytestmark = pytest.mark.django_db<br><br>client = Client()<br><br>@pytest.fixture()<br>def user():<br>    user = mixer.blend(User, first_name=\"Nick\", username=\"nickanism\")<br>    return user<br><br>@pytest.fixture()<br>def social_platform():<br>    SocialLoginPlatform.objects.create(name=\"none\")<br>    social_platform = mixer.blend(SocialLoginPlatform, name=\"google\")<br>    return social_platform<br><br>@pytest.fixture()<br>def country():<br>    country = mixer.blend(Country, name=\"South Korea\", code=\"KR\")<br>    return country<br><br>@pytest.mark.django_db<br>def test_user_profile_check(user, social_platform, country):<br>    assert user.first_name == \"Nick\"<br>    assert social_platform.name == \"google\"<br>    assert country.name == \"South Korea\"<br>    assert user.profile != None<br><br>@pytest.mark.django_db<br>def test_user_creation_country_list(client, country):<br>    url = reverse('country-list')<br>    response = client.get(url)<br>    assert response.status_code == 200<br>    assert json.loads(response.content)['country_list'][0]['name'] == country.name</pre>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2aa64b0257a\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Since last Tuesday, I have started working at a new company: Tradir. Tradir is the company responsible for tradir.io, which is a collaboration web app for international trade. Leaving behind the previous project (brought to you by Hodosoft) was no easy process but the challenges at Tradir are much more burdensome. First of all, the codebase flaunts all sorts of advanced features of Python and Django. It\u2019s been a week and I still have no idea how I am going to catch up with this. I need to create some sort of roadmap for just the onboarding process.</p>\n<p>So far, I have crafted some unit tests. They take about 1 percent of the whole list of the Tradir application. Gotta start somewhere.</p>\n<pre>import pytest<br>import json<br><br>from django.urls import reverse<br>from django.contrib.auth.models import User<br>from django.test import Client<br>from mixer.backend.django import mixer<br><br>from user.models import SocialLoginPlatform<br>from contacts.models import Country<br><br><br>pytestmark = pytest.mark.django_db<br><br>client = Client()<br><br>@pytest.fixture()<br>def user():<br>    user = mixer.blend(User, first_name=\"Nick\", username=\"nickanism\")<br>    return user<br><br>@pytest.fixture()<br>def social_platform():<br>    SocialLoginPlatform.objects.create(name=\"none\")<br>    social_platform = mixer.blend(SocialLoginPlatform, name=\"google\")<br>    return social_platform<br><br>@pytest.fixture()<br>def country():<br>    country = mixer.blend(Country, name=\"South Korea\", code=\"KR\")<br>    return country<br><br>@pytest.mark.django_db<br>def test_user_profile_check(user, social_platform, country):<br>    assert user.first_name == \"Nick\"<br>    assert social_platform.name == \"google\"<br>    assert country.name == \"South Korea\"<br>    assert user.profile != None<br><br>@pytest.mark.django_db<br>def test_user_creation_country_list(client, country):<br>    url = reverse('country-list')<br>    response = client.get(url)<br>    assert response.status_code == 200<br>    assert json.loads(response.content)['country_list'][0]['name'] == country.name</pre>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2aa64b0257a\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["python","django","pytest"]},{"title":"Stay away from Tutorials!","pubDate":"2020-11-20 03:59:40","link":"https://nickanism.medium.com/stay-away-from-tutorials-7178cba2bd67?source=rss-6fe9d0704dae------2","guid":"https://medium.com/p/7178cba2bd67","author":"Nicholas An","thumbnail":"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7178cba2bd67","description":"\n<p>There is a really bad habit of mine that has stalled me from becoming a good learner/developer\u200a\u2014\u200aand that is a tutorial hell. I would always begin some tutorial, finish 30\u201360 percent of it, get frustrated with the lack of skill I attain, and move on to some other tutorial.</p>\n<p>That is not quite\u00a0healthy.</p>\n<p>So I have decided to stay away from tutorials as much as possible. One good exception is tutorials featured in official documentations. Speaking of documentation, I should\u00a0RTFM.</p>\n<p>One thing I kept hearing from various podcasts regarding learning how to learn new technologies is to build your own thing. Sure, it is a solid idea except I tried this also and always quit in the middle after trying to build one small feature for days to no avail. Especially, while learning iOS, I have hit some really hard break wall that would just discourage me to the bottom of a pit. A specific case for this was settings up social Authentication for iOS. When I looked at the Firebase and Google documentation, they mention these files called AppDelegate and ViewController, but when I try to do, as they say, there was no AppDelegate or ViewController! Surely, I was using Xcode 12 with SwiftUI lifecycle but there was some kind of lack of explanation going on on the Internet.</p>\n<p>And thus came my second lesson from this predicament: Always try to reflect on what went wrong and how to improve. Experience is the key here. What I needed to look out for were some Youtube tutorials. However, alas, during this time, I solemnly swore that I would never use Instagram nor Youtube ever again so as to mitigate their effort to affect my mentality. My problem, specifically, for such apps were my addition and time-wasting habits. If I were to use Youtube just to look for how to achieve certain things, I should be allowed some time with videos\u2014 technical tutorials, not some lame clickbait video about how to get a better job with\u00a0300k.</p>\n<p>So\u2026 regarding my own personal journey to learn iOS development with a full-time job that occupies 9+ hours a day, I learned that I must stay away from Udemy tutorials\u2026 and possibly Pluralsight tutorials as well (their tutorials on Swift was great, but ones on iOS development were awfully obsolete). Because of this Apple\u2019s nature where they keep changing things like syntax and user interface, I need to look for the latest articles/videos about how to build\u00a0things.</p>\n<p>On the other hand, using Youtube as the only source of knowledge should be avoided. Just like how I learned a lot from English-Korean dictionaries and thesauruses, I should look way more into official documentation and books. And surely, I must learn how to not too hurry when I read the documentation. Always try to really understand the material and give some kind of meaning to\u00a0it.</p>\n<p>Another important point to reflect is that although I had a specific idea for what I want to build, I didn\u2019t make this into small pieces. When you try to learn a new technology by building your own app, you barely know about this technology\u200a\u2014\u200awhich is not enough to achieve what you have in your mind. So, me trying to just ambiguously sketch the social Authorization page in my mind was not a good approach. I should have asked, \u201cWhat is this Authorization for? What do we see before this Authorization? What do we see after this Authorization?\u201d You need to come up with more reasons to build this thing. Also, you must START SMALL. Maybe a loading page and a landing page will be enough for me to spend long hours to firmly grasp the basics of iOS development and\u00a0Swift.</p>\n<p>This article sort of became long. So I will have to make it short now. Important takeaways:</p>\n<ol>\n<li>Learn by building what you have in\u00a0mind.</li>\n<li>Plan what you want to build in molecular details.</li>\n<li>Start small. Do not start with fancy functionalities.</li>\n<li>Peruse(not just skim or casually read) the documentation\u2019s introductory chapters.</li>\n<li>Be curious. When you start with the official tutorial, dissect the sample code and search for the code snippet in the documentation (like option-click on syntax in Xcode12).</li>\n<li>Go through the roadblocks yourself. Find references yourself!</li>\n</ol>\n<p>One last thing: Autonomy is the key. Be a VERY ACTIVE RESEARCHER</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7178cba2bd67\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>There is a really bad habit of mine that has stalled me from becoming a good learner/developer\u200a\u2014\u200aand that is a tutorial hell. I would always begin some tutorial, finish 30\u201360 percent of it, get frustrated with the lack of skill I attain, and move on to some other tutorial.</p>\n<p>That is not quite\u00a0healthy.</p>\n<p>So I have decided to stay away from tutorials as much as possible. One good exception is tutorials featured in official documentations. Speaking of documentation, I should\u00a0RTFM.</p>\n<p>One thing I kept hearing from various podcasts regarding learning how to learn new technologies is to build your own thing. Sure, it is a solid idea except I tried this also and always quit in the middle after trying to build one small feature for days to no avail. Especially, while learning iOS, I have hit some really hard break wall that would just discourage me to the bottom of a pit. A specific case for this was settings up social Authentication for iOS. When I looked at the Firebase and Google documentation, they mention these files called AppDelegate and ViewController, but when I try to do, as they say, there was no AppDelegate or ViewController! Surely, I was using Xcode 12 with SwiftUI lifecycle but there was some kind of lack of explanation going on on the Internet.</p>\n<p>And thus came my second lesson from this predicament: Always try to reflect on what went wrong and how to improve. Experience is the key here. What I needed to look out for were some Youtube tutorials. However, alas, during this time, I solemnly swore that I would never use Instagram nor Youtube ever again so as to mitigate their effort to affect my mentality. My problem, specifically, for such apps were my addition and time-wasting habits. If I were to use Youtube just to look for how to achieve certain things, I should be allowed some time with videos\u2014 technical tutorials, not some lame clickbait video about how to get a better job with\u00a0300k.</p>\n<p>So\u2026 regarding my own personal journey to learn iOS development with a full-time job that occupies 9+ hours a day, I learned that I must stay away from Udemy tutorials\u2026 and possibly Pluralsight tutorials as well (their tutorials on Swift was great, but ones on iOS development were awfully obsolete). Because of this Apple\u2019s nature where they keep changing things like syntax and user interface, I need to look for the latest articles/videos about how to build\u00a0things.</p>\n<p>On the other hand, using Youtube as the only source of knowledge should be avoided. Just like how I learned a lot from English-Korean dictionaries and thesauruses, I should look way more into official documentation and books. And surely, I must learn how to not too hurry when I read the documentation. Always try to really understand the material and give some kind of meaning to\u00a0it.</p>\n<p>Another important point to reflect is that although I had a specific idea for what I want to build, I didn\u2019t make this into small pieces. When you try to learn a new technology by building your own app, you barely know about this technology\u200a\u2014\u200awhich is not enough to achieve what you have in your mind. So, me trying to just ambiguously sketch the social Authorization page in my mind was not a good approach. I should have asked, \u201cWhat is this Authorization for? What do we see before this Authorization? What do we see after this Authorization?\u201d You need to come up with more reasons to build this thing. Also, you must START SMALL. Maybe a loading page and a landing page will be enough for me to spend long hours to firmly grasp the basics of iOS development and\u00a0Swift.</p>\n<p>This article sort of became long. So I will have to make it short now. Important takeaways:</p>\n<ol>\n<li>Learn by building what you have in\u00a0mind.</li>\n<li>Plan what you want to build in molecular details.</li>\n<li>Start small. Do not start with fancy functionalities.</li>\n<li>Peruse(not just skim or casually read) the documentation\u2019s introductory chapters.</li>\n<li>Be curious. When you start with the official tutorial, dissect the sample code and search for the code snippet in the documentation (like option-click on syntax in Xcode12).</li>\n<li>Go through the roadblocks yourself. Find references yourself!</li>\n</ol>\n<p>One last thing: Autonomy is the key. Be a VERY ACTIVE RESEARCHER</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7178cba2bd67\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["ios-app-development","learning-to-code","programming"]}]}